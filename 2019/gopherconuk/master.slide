Go - The COW way
December 2019

Horacio López
horacio.lopez@mercadolibre.com

Mauro Reverter
mauro.reverter@mercadolibre.com

* Agenda 

Day 1

- Brief overview GopherCon UK
- I am a Java dev, could I be a GO dev?
- How do I organize my project? (the COW way)
- Workshop: Learning GO using techniques

Day 2

- GopherCon UK in detail
- Workshop: ?

* Agenda - Day 1

*ToDo*

- Brief overview GopherCon UK
- I am a Java dev, could I be a GO dev?
- How do I organize my project? (the COW way)
- Workshop: Learning GO using techniques

*Done*


* Brief overview GopherCon UK
.image ./images/logo.png

* Agenda - Day 1

*ToDo*

- I am a Java dev, could I be a GO dev?
- How do I organize my project? (the COW way)
- Workshop: Learning GO using techniques

*Done*

- Brief overview GopherCon UK

* I am a Java dev, could I be a GO dev?
.image ./images/gopher-java.png

* I am a Java dev, could I be a GO dev?

*ToDo*

- Is GO an Object Oriented Language?
- The go type system for newcomers
- Code Conventions

*Done*

- Nothing yet :(


* Is GO an Object Oriented Language?

- Classes (possible through structs in GO)
- Encapsulation (possible on package level in Go)
- Composition (possible through embedding in Go)
- Polymorphism (possible through Interface satisfaction in Go)
- Inheritance (not supported, considered a bad practice)

* Classes

How does a Struct look like?

.code java2go.go /START 8.1/,/END 8.1/

Can such a Class (Struct) also have methods? Sure.

.code java2go.go /START 8.2/,/END 8.2/   

Same as 

.code java2go.go /START 8.3/,/END 8.3/   

* Encapsulation

.code java2go.go /START 1/,/END 1/


* Composition (embedding)

.code java2go.go /START 2/,/END 2/

(cont...)


* Embedding is not sub-classing

.play embedding.go


* Polymorphism

.code java2go.go /START 4/,/END 4/

Above, r.Read will be dispatched to (*Buffer).Read.

* I am a Java dev, could I be a GO dev?

*ToDo*

- The go type system for newcomers
- Code Conventions

*Done*

- Is GO an Object Oriented Language?

* The go type system for newcomers
.image ./images/newcomer.png

* Embedding is not inheritance

Consider the following struct:

.code java2go.go /START 3.1/,/END 3.1/

Then, File objects will directly have access to sync.Mutex methods:

.code java2go.go /START 3.2/,/END 3.2/

This is not sub-classing!!

* No explicit interface implementations

.code java2go.go /5/,/END 5/

- Culture of not introducing new interfaces (reduces the number of similar looking interfaces)

.link https://gobyexample.com/interfaces https://gobyexample.com/interfaces

* No constructors

- Go doesn’t have constructors
- Go has a philosophy to use zero-value to represent the default

Examples:

.code java2go.go /START 6/,/END 6/

* Nil receivers

Below, event logging will be a noop for the nil values.

.code java2go.go /START 7.1/,/END 7.1/

Then user can use the nil value for the noop behavior:

.code java2go.go /START 7.2/,/END 7.2/

* No generics (Golang 1.X)

Go doesn’t have generics until version 2

Golang 2 has generics!!!


* I am a Java dev, could I be a GO dev?

*ToDo*

- Code Conventions

*Done*

- Is GO an Object Oriented Language?
- The go type system for newcomers


* Code Conventions

.image ./images/gopheryesno.png

* Package organization

- Use multiple lines

   - doc.go       // package documentation
   - headers.go   // HTTP headers types and code
   - cookies.go   // HTTP cookies types and code
   - http.go      // HTTP client implementation, request and response types, etc.

(cont..)

* Package organization

- Organize by responsability

   package models // DON'T DO IT!!!
   
   // User represents a user in the system.
   type User struct {...}

Instead 

   package mngtservice

   // User represents a user in the system.
   type User struct {...}

   func UsersByQuery(ctx context.Context, q *Query) ([]*User, *Iterator, error)

(cont..)

* Package organization

- Optimize for godoc
   godoc -http=<hostport>
- Don’t export from main

* Naming

A good name is:

- Consistent (easy to guess),
- Short (easy to type),
- Accurate (easy to understand).

* Package naming

- Lowercase only
- Short, but representative names
   import "pkgs.org/common" // DON'T!!!
If you cannot avoid a bad name, it is very likely that there is a problem with your overall structure and code organization.

- No plurals
   package httputils  // DON'T DO IT, USE SINGULAR FORM!!
- Documentation
   // Package ioutil implements some I/O utility functions.
   package ioutil 

* Function naming

DON'T

   user.GetUser() 

DO

   user.Get()

* Variables naming

BAD

    func RuneCount(buffer []byte) int {
        runeCount := 0
        for index := 0; index < len(buffer); {
            if buffer[index] < RuneSelf {
                index++
            } else {
                _, size := DecodeRune(buffer[index:])
                index += size
            }
            runeCount++
        }
        return runeCount
    }

* Variables naming

GOOD

    func RuneCount(b []byte) int {
        count := 0
        for i := 0; i < len(b); {
            if b[i] < RuneSelf {
                i++
            } else {
                _, n := DecodeRune(b[i:])
                i += n
            }
            count++
        }
        return count
    }

* Interface Naming

Interfaces that specify just one method are usually just that function name with 'er' appended to it.

    type Reader interface {
        Read(p []byte) (n int, err error)
    }
Sometimes the result isn't correct English (but they do it anyway)

    type Execer interface {
        Exec(query string, args []Value) (Result, error)
    }

When an interface includes multiple methods, choose a name that accurately describes its purpose (examples: net.Conn, http.ResponseWriter, io.ReadWriter).

.link https://golang.org/doc/effective_go.html#interface-names Effective go, interface naming

* Conclusion about naming

- Use short names.
- Think about context.
- Use your judgment.


* I am a Java dev, could I be a GO dev?

*ToDo*


*Done*

- Is GO an Object Oriented Language?
- The go type system for newcomers
- Code Conventions


* Agenda - Day 1

*ToDo*

- How do I organize my project? (the COW way)
- Workshop: Learning GO using techniques

*Done*

- Brief overview GopherCon UK
- I am a Java dev, could I be a GO dev?


* How do I organize my project? (the COW way)
   app // gin gonic routing
   config/
   controller/
   domain/
   kvshandler/
   resclient/
   service/
   vendor/ // dependencies directory
   Gopkg.lock
   Gopkg.toml 
   main.go   


* Example: Controller

.code naming.go /START 2/,/END 2/

* Agenda - Day 1

*ToDo*

- Workshop: Learning GO using techniques

*Done*

- Brief overview GopherCon UK
- I am a Java dev, could I be a GO dev?
- How do I organize my project? (the COW way)

* Workshop: Learning GO using techniques

* Go - The COW way (Day 2)

* Agenda - Day 2

- GopherCon UK in detail
- Workshop: Working with Configs API 

* GopherCon UK in detail
.image ./images/logo.png

* Workshop: Working with Configs API 

* Getting Started

- Run the application
   go run main.go

- Debug the application

   ## Install delve
   go get -u github.com/go-delve/delve/cmd/dlv

- Save and Get any site config. Understand what's happening when we hit the same config more than once

- Save and Get user config.

(cont...)

* Challenge #1

- Add new site config "second_factor" to enable/disable the second factor on payment creations (on COW). You can use the "status" property to handle enable/disable feature.

Example:

   {
      "id": "site_configurations",
      "date_created": "2017-02-07T10:44:56-04:00",
      "last_modified": "1969-12-31T20:00:00-04:00",
      "name": "Site configurations",
      "configuration_name": "second_factor",
      "site_id": "MLM",
      "status": "inactive",
      "value1": "",
      "value2": "",
      "value3": ""
   }

* Challenge #2

- Add user config "use_default_appid" to change the appid which will be used to payment creations (on COW). If the user config is active, checkout will use the default appid (instead of the merchant id)

Example:

   {
      "id": "use_default_appid",
      "date_created": "2014-07-24T15:27:42-04:00",
      "last_modified": "2014-11-18T15:47:55-04:00",
      "name": "Use default appid",
      "status": "active"
   }

* Challenge #3 (Advanced)

- Add a brand new site config to exclude payment methods or payment types for a whole site. The name could be "payment_methods_exclusion"

Example:

   {
      "id": "site_configurations",
      "date_created": "2017-02-07T10:44:56-04:00",
      "last_modified": "1969-12-31T20:00:00-04:00",
      "name": "Payment Methods exclusion configuration",
      "configuration_name": "payment_methods_exclusion",
      "site_id": "MLM",
      "excluded_payment_methods": ["visa"],
      "excluded_payment_types": ["ticket", "bank_transfer"]
   }


* References

.link https://medium.com/gophersland/gopher-vs-object-oriented-golang-4fa62b88c701 Gopher Vs Object Oriented Golang
.link https://rakyll.org/typesystem/ Go type for newcomers
.link https://gobyexample.com/ Go by example
.link https://talks.golang.org/2014/names.slide What's a name?





